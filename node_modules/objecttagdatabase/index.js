'use strict';
var fs = require('fs');
const path = require('path');

exports.printMsg = function () {
    console.log("Just a very simple test function.")
    return 0
}

class ClothData {
    constructor(imagePath, tags) {
        this._imagePath = imagePath
        this._tags = tags
    }

    describe() {
        alert(`Testing testing testing.`)
    }
}

module.exports = ClothData;

const rootDirectory = `${__dirname}\\Clothes`

//Copy images to environment directory and generate corresponding tags file.
/*
The hierarchy will be as followed:
-- Clothes
*/

exports.saveImagesAsDatabase = function(imagePaths) {
    for (imagePath in imagePaths) {
        fs.copyFile(imagePath, rootDirectory + '\\' + path.basename(imagePath), (err) => {
            if (err != null) { return }
        })
        fs.closeSync(fs.openSync(rootDirectory + '\\' + path.basename(file, path.extname(file) + '.txt'), 'w'));
    }
    console.log("Successfully copied all files to the working environment.")
}

//Use when user choose a new tag for a picture
exports.appendTagToImage = function (ClothData, tagName) {
    fs.appendFile(ClothData._imagePath, `${tagName}\n`, function (err) {
        if (err) throw err;
        console.log(`Saved tag name: ${tagName}`);
    });
}

//Load all saved images and append into the ClothData list (return the list)
exports.loadDatabase = function () {
    database = []
    fs.readdirSync(rootDirectory).forEach(file => {
        const imagePath = rootDirectory + '\\' + path.basename(file)
        const tags = fs.readFileSync(rootDirectory + '\\' + path.basename(file, path.extname(file)) + '.txt').toString().split("\n");
        const clothData = ClothData(imagePath, typeOfCloth, tags)
        
        database.push(clothData)
    });
    return database
}